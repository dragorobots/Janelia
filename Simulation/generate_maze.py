#!/usr/bin/env python3
"""
maze_generate.py

Generate MuJoCo <geom> entries from start–end wall coordinates.
"""

import numpy as np

# ─── Updated maze segments (start → end) ───
segments = [
    ((0.04, 5.78), (0.04, 4.55)),
    ((0.04, 4.55), (1.33, 4.55)),
    ((0.9, 4.55), (0.90, 2.11)),
    ((0.9, 2.68), (0.04, 2.68)),
    ((0.04, 2.68), (0.04, 0.04)),
    ((0.04, 0.04), (3.45, 0.04)),
    ((3.47, 0.04), (3.47, 2.68)),
    ((3.47, 2.68), (2.65, 2.68)),
    ((2.68, 2.00), (2.68, 4.56)),
    ((2.68, 4.56), (2.00, 4.56)),
    ((2.00, 4.56), (2.00, 5.79)),
    ((2.00, 5.79), (0.06, 5.79)),
    ((0.02, 1.34), (0.90, 1.34)),
    ((0.90, 1.33), (0.90, 0.67)),
    ((3.44, 1.35), (2.62, 1.35)),
    ((2.62, 1.35), (2.62, 0.68)),
    ((1.72, 3.80), (1.72, 0.06)),
]

# tolerance for deciding vertical vs horizontal
TOL = 1e-2
# half-thickness of every wall (so total thickness = 0.10 m)
THICK = 0.05
# z-height (half-thickness) of walls
Z_HALFLEN = 0.2

def main():
    print("<!-- Maze walls autogenerated from your updated coordinates -->\n")
    for idx, ((x1, y1), (x2, y2)) in enumerate(segments):
        dx, dy = abs(x1 - x2), abs(y1 - y2)
        if dx < TOL and dy > TOL:
            # Vertical wall
            cx = x1
            cy = (y1 + y2) / 2
            half_len = dy / 2
            size_x, size_y = THICK, half_len
        elif dy < TOL and dx > TOL:
            # Horizontal wall
            cx = (x1 + x2) / 2
            cy = y1
            half_len = dx / 2
            size_x, size_y = half_len, THICK
        else:
            # Diagonal or too small—skip with a warning
            print(f"<!-- skipping segment {idx}: ({x1:.2f},{y1:.2f})→({x2:.2f},{y2:.2f}) not axis-aligned -->")
            continue

        print(
            f'<geom name="wall_seg_{idx}" type="box"'
            f' pos="{cx:.3f} {cy:.3f} {Z_HALFLEN}"'
            f' size="{size_x:.3f} {size_y:.3f} {Z_HALFLEN}"'
            f' rgba="0.1 0.1 0.1 1"/>'
        )

if __name__ == "__main__":
    main()
